# PEERING BIRD BGP config file for testmuxctr
# This file is automatically generated, do NOT edit it manually.

# If we ever hit performance or memory problems, we can try to
# send all routes to the mux table directly and only filter on
# export.


router id 10.100.0.100;


log stderr all;

table mux;
table igplocal;


###############################################
# Handle directly connected and kernel routes #
###############################################
# (required for sessions)
protocol device {
    scan time 10;
}
protocol direct dtap {
    interface "tap0";
    table igplocal;
}
template kernel kernel_template {
    export all;
    import none;
    scan time 10;
    learn off;
    persist on;
    graceful restart on;
    device routes off;
}


########################
# Announcement filters #
########################
function from_client()
{
    if ( proto ~ "client*" ) then { return true; }
    return false;
}
function safe_announcement()
{
    
    if ! ( net ~ [
            138.185.228.0/22{22,24}, 147.28.224.0/20{20,24}, 147.28.240.0/20{20,24}, 151.216.32.0/22{22,24}, 184.164.224.0/19{19,24}, 185.115.212.0/22{22,24}, 188.227.156.0/22{22,24}, 204.9.168.0/22{22,24}
            ] ) then {
        return false;
    }

    if ( bgp_path.len > 5 ) then { return false; }
    if ( bgp_path.len = 0 ) then { return true; }
    if ! ( bgp_path.last ~ [ 47065, 61574, 61575, 61576, 263842, 263843, 263844 ] ) then {
        return false;
    }
    return true;
}


#########################
# Client configurations #
#########################
### Downstream data plane routing:
table kt_clients;
protocol pipe clients_to_kernel {
    table kt_clients;
    peer table mux;
    import filter {
        if ! from_client() then { reject; }
        accept;
    };
    export none;
}
protocol kernel k_clients from kernel_template {
    table kt_clients;
    kernel table 20000;
}

### Baseline templates for client protocols:
template bgp client_tpl {
    local as 47065;
    allow local as 5;
    add paths on;
    export all;
    igp table igplocal;
}


### Configuration for client test1
### BGP session template (protocol is created dynamically by OpenVPN):
table bt_c_test1;
template bgp client_tpl_test1 from client_tpl {
    table bt_c_test1;
    import filter {
        if ! safe_announcement() then { reject; }
        
    
        if net ~ [ 184.164.224.0/23{23,24} ] then { accept; }
    
        if net ~ [ 138.185.228.0/24{24,24} ] then { accept; }
    

        reject;
    };
}
### Exchanging routes with BIRD:
protocol pipe client_test1_to_mux {
    table mux;
    peer table bt_c_test1;
    import all;
    export all;
}

### Configuration for client test2
### BGP session template (protocol is created dynamically by OpenVPN):
table bt_c_test2;
template bgp client_tpl_test2 from client_tpl {
    table bt_c_test2;
    import filter {
        if ! safe_announcement() then { reject; }
        
    
        if net ~ [ 138.185.230.0/24{24,24} ] then { accept; }
    
        if net ~ [ 184.164.226.0/23{23,24} ] then { accept; }
    

        reject;
    };
}
### Exchanging routes with BIRD:
protocol pipe client_test2_to_mux {
    table mux;
    peer table bt_c_test2;
    import all;
    export all;
}



#######################
# Peer configurations #
#######################
### Baseline templates for peer protocols:
template bgp upstream {
    local as 47065;
    allow local as 5;
    import all;
    export filter {
        if ! safe_announcement() then { reject; }
        accept;
    };
}

### Global upstream routing table:
table kt_upstreams;
protocol kernel k_upstreams from kernel_template {
        table kt_upstreams;
        kernel table 10000;
}


### Configuration for peer 1 AS65001
### Peer-specific filter:
table bt_up1;
table kt_up1;
function from_up1()
{
    if ( proto != "up1_65001" ) then { return false; }
    return true;
}
### BGP session:
protocol bgp up1_65001 from upstream {
    description "upstream1";
    neighbor 10.100.0.121 as 65001;
    table bt_up1;
    
}
### Installing routes on global kernel routing table:
protocol pipe up1_to_upstreams {
    table kt_upstreams;
    peer table bt_up1;
    import filter {
        if ! from_up1() then { reject; }
        accept;
    };
    export none;
}
### Installing routes on peer-specific kernel routing table:
protocol pipe up1_to_kernel {
    table kt_up1;
    peer table bt_up1;
    import filter {
        if ! from_up1() then { reject; }
        accept;
    };
    export none;
}
protocol kernel k_up1_65001 from kernel_template {
    table kt_up1;
    kernel table 10001;
}
### Exchanging routes with BIRD:
protocol pipe up1_to_mux {
    table mux;
    peer table bt_up1;
    import filter {
        if ! from_up1() then { reject; }
        
        bgp_next_hop = 100.65.0.1;

        accept;
    };
    export filter {
        if ! from_client() then { reject; }
        if ( bgp_community.len = 0 ) then { accept; }
        if ( (47065,1) ~ bgp_community ) then {
            bgp_community = -empty-;
            accept;
        }
        reject;
    };
}

### Configuration for peer 2 AS65002
### Peer-specific filter:
table bt_up2;
table kt_up2;
function from_up2()
{
    if ( proto != "up2_65002" ) then { return false; }
    return true;
}
### BGP session:
protocol bgp up2_65002 from upstream {
    description "upstream2";
    neighbor 10.100.0.122 as 65002;
    table bt_up2;
    
}
### Installing routes on global kernel routing table:
protocol pipe up2_to_upstreams {
    table kt_upstreams;
    peer table bt_up2;
    import filter {
        if ! from_up2() then { reject; }
        accept;
    };
    export none;
}
### Installing routes on peer-specific kernel routing table:
protocol pipe up2_to_kernel {
    table kt_up2;
    peer table bt_up2;
    import filter {
        if ! from_up2() then { reject; }
        accept;
    };
    export none;
}
protocol kernel k_up2_65002 from kernel_template {
    table kt_up2;
    kernel table 10002;
}
### Exchanging routes with BIRD:
protocol pipe up2_to_mux {
    table mux;
    peer table bt_up2;
    import filter {
        if ! from_up2() then { reject; }
        
        bgp_next_hop = 100.65.0.2;

        accept;
    };
    export filter {
        if ! from_client() then { reject; }
        if ( bgp_community.len = 0 ) then { accept; }
        if ( (47065,2) ~ bgp_community ) then {
            bgp_community = -empty-;
            accept;
        }
        reject;
    };
}

### Configuration for peer 4 AS65010
### Peer-specific filter:
table bt_up4;
table kt_up4;
function from_up4()
{
    if ( proto != "up4_65010" ) then { return false; }
    return true;
}
### BGP session:
protocol bgp up4_65010 from upstream {
    description "upstream-gre (GRE peer test)";
    neighbor 10.255.255.2 as 65010;
    table bt_up4;
    
}
### Installing routes on global kernel routing table:
protocol pipe up4_to_upstreams {
    table kt_upstreams;
    peer table bt_up4;
    import filter {
        if ! from_up4() then { reject; }
        accept;
    };
    export none;
}
### Installing routes on peer-specific kernel routing table:
protocol pipe up4_to_kernel {
    table kt_up4;
    peer table bt_up4;
    import filter {
        if ! from_up4() then { reject; }
        accept;
    };
    export none;
}
protocol kernel k_up4_65010 from kernel_template {
    table kt_up4;
    kernel table 10004;
}
### Exchanging routes with BIRD:
protocol pipe up4_to_mux {
    table mux;
    peer table bt_up4;
    import filter {
        if ! from_up4() then { reject; }
        
        bgp_next_hop = 100.65.0.4;

        accept;
    };
    export filter {
        if ! from_client() then { reject; }
        if ( bgp_community.len = 0 ) then { accept; }
        if ( (47065,4) ~ bgp_community ) then {
            bgp_community = -empty-;
            accept;
        }
        reject;
    };
}

### Configuration for peer 5 AS65020
### Peer-specific filter:
table bt_up5;
table kt_up5;
function from_up5()
{
    if ( proto != "up5_65020" ) then { return false; }
    return true;
}
### BGP session:
protocol bgp up5_65020 from upstream {
    description "upstream3 (VLAN peer)";
    neighbor 10.254.254.2 as 65020;
    table bt_up5;
    
}
### Installing routes on global kernel routing table:
protocol pipe up5_to_upstreams {
    table kt_upstreams;
    peer table bt_up5;
    import filter {
        if ! from_up5() then { reject; }
        accept;
    };
    export none;
}
### Installing routes on peer-specific kernel routing table:
protocol pipe up5_to_kernel {
    table kt_up5;
    peer table bt_up5;
    import filter {
        if ! from_up5() then { reject; }
        accept;
    };
    export none;
}
protocol kernel k_up5_65020 from kernel_template {
    table kt_up5;
    kernel table 10005;
}
### Exchanging routes with BIRD:
protocol pipe up5_to_mux {
    table mux;
    peer table bt_up5;
    import filter {
        if ! from_up5() then { reject; }
        
        bgp_next_hop = 100.65.0.5;

        accept;
    };
    export filter {
        if ! from_client() then { reject; }
        if ( bgp_community.len = 0 ) then { accept; }
        if ( (47065,5) ~ bgp_community ) then {
            bgp_community = -empty-;
            accept;
        }
        reject;
    };
}



#################################
# BGP collectors configurations #
#################################
### Load kernel routing table for multihop IGP
table kt_default;
protocol kernel kdefault {
    table kt_default;
    export none;
    import all;
    learn on;
    scan time 10;
    persist on;
    graceful restart on;
    device routes off;
}

### Baseline template for route collectors
template bgp collector {
    local as 47065;
    allow local as 5;
    table mux;
    igp table kt_default;
    add paths tx;
    import none;
    export all;
}


protocol bgp collector1_6447 from collector {
    description "BGPmon route collector";
    neighbor 129.82.138.6 as 6447;
    
    
    multihop 32;
    
}



#############################
# Additional included files #
#############################


include "/var/lib/peering/birdvpn/ipv4_test1_*";

include "/var/lib/peering/birdvpn/ipv4_test2_*";


